name: Notify on PR Activity

# 워크플로우 트리거: PR 리뷰가 제출되거나, PR에 코멘트가 작성되었을 때 실행
on:
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]
  pull_request_review_comment:  # 추가: PR 코멘트 답글 감지
    types: [created]

jobs:
  # 기존 기능: PR 리뷰 상태 알림 (승인, 변경 요청)
  notify_on_review:
    name: Notify Slack on Review
    # 'main' 브랜치로 향하는 PR의 리뷰일 경우에만 이 잡을 실행합니다.
    if: github.event_name == 'pull_request_review' && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v4

      - name: Notify Slack on Review Status
        # 'approved' 또는 'changes_requested' 상태일 때만 실행합니다.
        if: github.event.review.state == 'approved' || github.event.review.state == 'changes_requested'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "=== PR 리뷰 알림 시작 ==="
          echo "리뷰 상태: ${{ github.event.review.state }}"

          # 헬퍼 스크립트 및 설정 파일 확인
          if [ ! -f ".github/script/team_review_helpers.sh" ] || [ ! -f ".github/config/team_members.json" ]; then
            echo "오류: 헬퍼 스크립트 또는 팀원 설정 파일을 찾을 수 없습니다."
            exit 1
          fi

          source .github/script/team_review_helpers.sh
          REVIEW_MEMBERS=$(cat .github/config/team_members.json)

          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR_LOGIN="${{ github.event.pull_request.user.login }}"
          REVIEWER_LOGIN="${{ github.event.review.user.login }}"
          REVIEW_STATE="${{ github.event.review.state }}"
          REVIEW_URL="${{ github.event.review.html_url }}"

          PR_AUTHOR_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$PR_AUTHOR_LOGIN" "slack_id")
          REVIEWER_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$REVIEWER_LOGIN" "slack_id")

          PR_AUTHOR_MENTION=$([ -z "$PR_AUTHOR_SLACK_ID" ] && echo "$PR_AUTHOR_LOGIN" || echo "<@$PR_AUTHOR_SLACK_ID>")
          REVIEWER_MENTION=$([ -z "$REVIEWER_SLACK_ID" ] && echo "$REVIEWER_LOGIN" || echo "<@$REVIEWER_SLACK_ID>")

          if [ "$REVIEW_STATE" = "approved" ]; then
            EMOJI=":tada:"
            STATUS_TEXT="승인"
          elif [ "$REVIEW_STATE" = "changes_requested" ]; then
            EMOJI=":warning:"
            STATUS_TEXT="변경 요청"
          fi

          MESSAGE="*PR:* <$PR_URL|$PR_TITLE> - *$STATUS_TEXT* ${EMOJI}\n*작성자:* $PR_AUTHOR_MENTION\n*리뷰어:* $REVIEWER_MENTION\n*리뷰:* <$REVIEW_URL|리뷰 바로가기>"

          echo "=== 전송할 메시지 미리보기 ==="
          echo -e "$MESSAGE"
          echo "=========================="

          # Slack에 메시지 전송
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$MESSAGE\"}" "$SLACK_WEBHOOK_URL"
          echo "✅ Slack 메시지 전송 완료"

  notify_on_mention:
    name: Notify Slack on Mention
    # 이슈 코멘트 또는 PR 리뷰 코멘트에서 멘션이 있을 때 실행
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request) ||
      github.event_name == 'pull_request_review_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v4

      - name: Notify Slack on Mention
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 'gh' CLI 인증에 필요
        run: |
          echo "=== PR 멘션 알림 시작 ==="

          # 이벤트 타입에 따른 변수 설정
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            # 일반 PR 코멘트
            COMMENT_BODY="${{ github.event.comment.body }}"
            COMMENTER_LOGIN="${{ github.event.comment.user.login }}"
            PR_URL="${{ github.event.issue.html_url }}"
            PR_TITLE="${{ github.event.issue.title }}"
            COMMENT_URL="${{ github.event.comment.html_url }}"
            PR_NUMBER="${{ github.event.issue.number }}"
          elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            # PR 리뷰 코멘트 (답글)
            COMMENT_BODY="${{ github.event.comment.body }}"
            COMMENTER_LOGIN="${{ github.event.comment.user.login }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            COMMENT_URL="${{ github.event.comment.html_url }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi

          # gh cli를 사용해 PR의 베이스 브랜치 확인
          BASE_BRANCH=$(gh pr view $PR_NUMBER --json baseRefName --jq .baseRefName)

          if [ "$BASE_BRANCH" != "main" ]; then
            echo "PR이 main 브랜치를 대상으로 하지 않으므로 알림을 보내지 않습니다. (대상: $BASE_BRANCH)"
            exit 0
          fi

          # 헬퍼 스크립트 및 설정 파일 확인
          if [ ! -f ".github/script/team_review_helpers.sh" ] || [ ! -f ".github/config/team_members.json" ]; then
            echo "오류: 헬퍼 스크립트 또는 팀원 설정 파일을 찾을 수 없습니다."
            exit 1
          fi

          source .github/script/team_review_helpers.sh
          REVIEW_MEMBERS=$(cat .github/config/team_members.json)

          COMMENTER_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$COMMENTER_LOGIN" "slack_id")
          COMMENTER_MENTION=$([ -z "$COMMENTER_SLACK_ID" ] && echo "$COMMENTER_LOGIN" || echo "<@$COMMENTER_SLACK_ID>")

          # 코멘트 본문에서 '@'로 시작하는 모든 멘션 추출 (중복 제거)
          MENTIONED_USERS=$(echo "$COMMENT_BODY" | grep -oP '@[a-zA-Z0-9_-]+' | sed 's/@//' | sort -u)

          if [ -z "$MENTIONED_USERS" ]; then
            echo "코멘트에 멘션된 사용자가 없어 알림을 보내지 않습니다."
            exit 0
          fi

          # 멘션된 각 사용자에게 알림 전송 (멘션 작성자 본인도 포함)
          for USER in $MENTIONED_USERS; do
            echo "멘션된 사용자 '$USER'에 대한 알림을 처리합니다."
            MENTIONED_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$USER" "slack_id")

            if [ -z "$MENTIONED_SLACK_ID" ] || [ "$MENTIONED_SLACK_ID" = "null" ]; then
              echo "경고: '$USER'의 Slack ID를 찾을 수 없어 알림을 건너뜁니다."
              continue
            fi

            MENTIONED_USER_TAG="<@${MENTIONED_SLACK_ID}>"

            # --- ✨ 개선된 메시지 생성 로직 ---

            # 1. 코멘트 내용을 Slack에서 읽기 쉽게 포맷팅
            # 긴 코멘트의 경우 첫 200자만 보여주고 "..." 추가
            COMMENT_PREVIEW=$(echo "$COMMENT_BODY" | head -c 200)
            if [ ${#COMMENT_BODY} -gt 200 ]; then
              COMMENT_PREVIEW="${COMMENT_PREVIEW}..."
            fi

            # 2. 개행 문자를 처리하고 인용 블록으로 표시
            FORMATTED_COMMENT=$(echo "$COMMENT_PREVIEW" | sed 's/^/> /')

            # 3. 메시지 템플릿 생성
            MESSAGE_TEMPLATE="${MENTIONED_USER_TAG}님, ${COMMENTER_MENTION}님이 PR에서 회원님을 멘션했습니다. :speech_balloon:\n\n*PR:* <${PR_URL}|${PR_TITLE}>\n\n*코멘트 내용:*\n${FORMATTED_COMMENT}\n\n<${COMMENT_URL}|코멘트 바로가기>"

            # 4. jq를 사용하여 JSON 페이로드 안전하게 생성
            PAYLOAD=$(jq -n --arg text "$MESSAGE_TEMPLATE" '{"text": $text}')

            echo "=== 전송할 메시지 미리보기 ($USER) ==="
            echo "$MESSAGE_TEMPLATE"
            echo "==================================="

            # 5. 생성된 JSON 페이로드를 Slack 웹훅으로 전송
            RESPONSE=$(curl -s -w "%{http_code}" -X POST \
              -H 'Content-type: application/json' \
              --data "$PAYLOAD" \
              "$SLACK_WEBHOOK_URL")

            HTTP_CODE="${RESPONSE: -3}"
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ '$USER'에게 Slack 메시지 전송 완료"
            else
              echo "❌ '$USER'에게 Slack 메시지 전송 실패 (HTTP: $HTTP_CODE)"
            fi
          done

          echo "=== PR 멘션 알림 완료 ==="