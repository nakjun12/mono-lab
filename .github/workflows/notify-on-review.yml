name: Notify on PR Activity

# 워크플로우 트리거: PR 리뷰가 제출되거나, PR에 코멘트가 작성되었을 때 실행
on:
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]
  pull_request_review_comment:  # 추가: PR 코멘트 답글 감지
    types: [created]

jobs:
  # 기존 기능: PR 리뷰 상태 알림 (승인, 변경 요청)
  notify_on_review:
    name: Notify Slack on Review
    # 'main' 브랜치로 향하는 PR의 리뷰일 경우에만 이 잡을 실행합니다.
    if: github.event_name == 'pull_request_review' && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v4

      - name: Notify Slack on Review Status
        # 'approved' 또는 'changes_requested' 상태일 때만 실행합니다.
        if: github.event.review.state == 'approved' || github.event.review.state == 'changes_requested'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "=== PR 리뷰 알림 시작 ==="
          echo "리뷰 상태: ${{ github.event.review.state }}"

          # 헬퍼 스크립트 및 설정 파일 확인
          if [ ! -f ".github/script/team_review_helpers.sh" ] || [ ! -f ".github/config/team_members.json" ]; then
            echo "오류: 헬퍼 스크립트 또는 팀원 설정 파일을 찾을 수 없습니다."
            exit 1
          fi

          source .github/script/team_review_helpers.sh
          REVIEW_MEMBERS=$(cat .github/config/team_members.json)

          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR_LOGIN="${{ github.event.pull_request.user.login }}"
          REVIEWER_LOGIN="${{ github.event.review.user.login }}"
          REVIEW_STATE="${{ github.event.review.state }}"
          REVIEW_URL="${{ github.event.review.html_url }}"

          PR_AUTHOR_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$PR_AUTHOR_LOGIN" "slack_id")
          REVIEWER_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$REVIEWER_LOGIN" "slack_id")

          PR_AUTHOR_MENTION=$([ -z "$PR_AUTHOR_SLACK_ID" ] && echo "$PR_AUTHOR_LOGIN" || echo "<@$PR_AUTHOR_SLACK_ID>")
          REVIEWER_MENTION=$([ -z "$REVIEWER_SLACK_ID" ] && echo "$REVIEWER_LOGIN" || echo "<@$REVIEWER_SLACK_ID>")

          if [ "$REVIEW_STATE" = "approved" ]; then
            EMOJI=":tada:"
            STATUS_TEXT="승인"
          elif [ "$REVIEW_STATE" = "changes_requested" ]; then
            EMOJI=":warning:"
            STATUS_TEXT="변경 요청"
          fi

          MESSAGE="*PR:* <$PR_URL|$PR_TITLE> - *$STATUS_TEXT* ${EMOJI}\n*작성자:* $PR_AUTHOR_MENTION\n*리뷰어:* $REVIEWER_MENTION\n*리뷰:* <$REVIEW_URL|리뷰 바로가기>"

          echo "=== 전송할 메시지 미리보기 ==="
          echo -e "$MESSAGE"
          echo "=========================="

          # Slack에 메시지 전송
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$MESSAGE\"}" "$SLACK_WEBHOOK_URL"
          echo "✅ Slack 메시지 전송 완료"

# .github/workflows/YOUR_WORKFLOW_FILE.yml

  notify_on_mention:
    name: Notify Slack on Mention
    # ✨ 개선점 1: 'pull_request_review_comment' 트리거 추가
    # PR의 코드 변경(diff)에 달린 댓글(스레드 댓글 포함)에 멘션된 경우도 감지합니다.
    if: (github.event_name == 'issue_comment' && github.event.issue.pull_request) || github.event_name == 'pull_request_review_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v4

      - name: Notify Slack on Mention
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 현재 발생한 이벤트의 종류를 스크립트에서 명확히 사용하기 위해 변수화
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          # 두 종류의 이벤트(issue_comment, pull_request_review_comment)에서 필요한 정보들을 모두 넘겨줍니다.
          # 스크립트 내에서 이벤트 종류에 따라 적절한 값을 선택해 사용합니다.
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENTER_LOGIN: ${{ github.event.comment.user.login }}
          COMMENT_URL: ${{ github.event.comment.html_url }}
          ISSUE_PR_URL: ${{ github.event.issue.html_url }}
          ISSUE_PR_TITLE: ${{ github.event.issue.title }}
          ISSUE_PR_NUMBER: ${{ github.event.issue.number }}
          PR_URL_FROM_EVENT: ${{ github.event.pull_request.html_url }}
          PR_TITLE_FROM_EVENT: ${{ github.event.pull_request.title }}
          PR_NUMBER_FROM_EVENT: ${{ github.event.pull_request.number }}
          PR_BASE_BRANCH_FROM_EVENT: ${{ github.event.pull_request.base.ref }}
        run: |
          # --- ✨ 개선된 변수 설정 로직 ---
          # 1. 이벤트 유형에 따라 변수를 설정하여 일관성 유지
          if [ "$GITHUB_EVENT_NAME" == "issue_comment" ]; then
            echo "이벤트 유형: 일반 PR 코멘트 (issue_comment)"
            PR_URL="$ISSUE_PR_URL"
            PR_TITLE="$ISSUE_PR_TITLE"
            PR_NUMBER="$ISSUE_PR_NUMBER"
            # issue_comment 이벤트는 base branch 정보를 포함하지 않으므로 gh cli 사용
            BASE_BRANCH=$(gh pr view $PR_NUMBER --json baseRefName --jq .baseRefName)
          elif [ "$GITHUB_EVENT_NAME" == "pull_request_review_comment" ]; then
            echo "이벤트 유형: 코드 리뷰 코멘트 (pull_request_review_comment)"
            PR_URL="$PR_URL_FROM_EVENT"
            PR_TITLE="$PR_TITLE_FROM_EVENT"
            PR_NUMBER="$PR_NUMBER_FROM_EVENT"
            # 이 이벤트는 base branch 정보를 포함하므로 API 호출 없이 바로 사용
            BASE_BRANCH="$PR_BASE_BRANCH_FROM_EVENT"
          fi

          # 2. 'main' 브랜치 대상 PR이 아니면 알림 없이 종료
          if [ "$BASE_BRANCH" != "main" ]; then
            echo "PR이 'main' 브랜치를 대상으로 하지 않으므로 알림을 보내지 않습니다. (대상 브랜치: $BASE_BRANCH)"
            exit 0
          fi

          echo "=== PR 멘션 알림 시작 ==="

          if [ ! -f ".github/script/team_review_helpers.sh" ] || [ ! -f ".github/config/team_members.json" ]; then
            echo "오류: 헬퍼 스크립트 또는 팀원 설정 파일을 찾을 수 없습니다."
            exit 1
          fi

          source .github/script/team_review_helpers.sh
          REVIEW_MEMBERS=$(cat .github/config/team_members.json)

          COMMENTER_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$COMMENTER_LOGIN" "slack_id")
          COMMENTER_MENTION=$([ -z "$COMMENTER_SLACK_ID" ] && echo "$COMMENTER_LOGIN" || echo "<@$COMMENTER_SLACK_ID>")

          MENTIONED_USERS=$(echo "$COMMENT_BODY" | grep -oP '@[a-zA-Z0-9_-]+' | sed 's/@//' | sort -u)

          if [ -z "$MENTIONED_USERS" ]; then
            echo "코멘트에 멘션된 사용자가 없어 알림을 보내지 않습니다."
            exit 0
          fi

          # --- ✨ 개선점 2: 코멘트 포매팅 방식 수정 ---
          # 여러 줄로 된 코멘트도 각 줄마다 인용(>) 처리하여 Slack에서 깨지지 않게 합니다.
          FORMATTED_COMMENT=$(echo "$COMMENT_BODY" | sed 's/^/> /')

          for USER in $MENTIONED_USERS; do
            echo "'$USER' 사용자에 대한 알림을 처리합니다."
            MENTIONED_SLACK_ID=$(get_review_member_info "$REVIEW_MEMBERS" "$USER" "slack_id")

            if [ -z "$MENTIONED_SLACK_ID" ] || [ "$MENTIONED_SLACK_ID" = "null" ]; then
              echo "경고: '$USER'의 Slack ID를 찾을 수 없어 알림을 건너뜁니다."
              continue
            fi

            MENTIONED_USER_TAG="<@${MENTIONED_SLACK_ID}>"

            read -r -d '' MESSAGE_TEXT << EOF
            ${MENTIONED_USER_TAG}님, ${COMMENTER_MENTION}님이 PR에서 회원님을 멘션했습니다. :speech_balloon:
            *PR:* <$PR_URL|$PR_TITLE>
            *코멘트 내용:*
            ${FORMATTED_COMMENT}

            <${COMMENT_URL}|코멘트 바로가기>
            EOF

            PAYLOAD=$(jq -n --arg text "$MESSAGE_TEXT" '{"text": $text}')

            echo "=== 전송할 메시지 미리보기 ($USER) ==="
            echo "$PAYLOAD"
            echo "==================================="

            curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"
            echo "✅ '$USER'에게 Slack 메시지 전송 완료"
          done

          echo "=== PR 멘션 알림 완료 ==="