name: Test Stateful Reviewer Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

jobs:
  test_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  # 성공/실패 테스트를 위해 아래 두 잡 중 하나를 선택하여 사용하세요.
  success_job:
    name: This job will succeed
    runs-on: ubuntu-latest
    steps:
      - name: 성공하는 단계
        run: echo "This job always succeeds."

  # failure_job:
  #   name: This job will fail
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 실패하는 단계
  #       run: |
  #         echo "This job is designed to fail."
  #         exit 1

  notify-on-completion:
    name: Notify Slack on Job Completion
    # 실패를 테스트하려면 'success_job'을 'failure_job'으로 바꾸세요.
    needs: [test_job, success_job]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check gh CLI Version
        run: gh --version


      - name: Run Stateful Notification Logic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          NEEDS_JSON: ${{ toJson(needs) }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_LABELS: ${{ toJSON(github.event.pull_request.labels.*.name) }}
        run: |
          # ================================================================
          # 📝 사전 준비 및 디버깅 로그
          # ================================================================
          echo "=== 🚦 워크플로우 시작: 상태 확인 및 알림 처리 ==="
          source .github/script/team_review_helpers.sh
          TEAM_MEMBERS=$(cat .github/config/team_members.json)

          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          ADDITIONS="${{ github.event.pull_request.additions }}"
          DELETIONS="${{ github.event.pull_request.deletions }}"
          CHANGED_FILES="${{ github.event.pull_request.changed_files }}"

          # 팀 멤버 확인
          if ! check_author "$TEAM_MEMBERS" "$PR_AUTHOR"; then
              echo "작성자가 팀 멤버가 아니므로 알림을 건너뜁니다."
              exit 0
          fi

          AUTHOR_NAME=$(get_review_member_info "$TEAM_MEMBERS" "$PR_AUTHOR" "name")
          AUTHOR_MENTION="<@$(get_review_member_info "$TEAM_MEMBERS" "$PR_AUTHOR" "slack_id")>"

          # 파일 변경 정보 문자열 생성
          if [ -n "$CHANGED_FILES" ] && [ "$CHANGED_FILES" != "0" ]; then
            FILES_INFO=" (${CHANGED_FILES} files)"
          else
            FILES_INFO=""
          fi

          # ================================================================
          # 🔍 현재 상태 및 이전 상태 분석
          # ================================================================

          # 현재 빌드 상태 결정
          CURRENT_BUILD_STATUS="success"
          if echo "$NEEDS_JSON" | jq -e '.[] | select(.result == "failure" or .result == "cancelled")' > /dev/null; then
            CURRENT_BUILD_STATUS="failure"
          fi
          echo "✅ 현재 빌드 상태: $CURRENT_BUILD_STATUS"

          # 이전 상태 확인 (라벨 기반)
          HAS_BUILD_FAILED_LABEL=$(echo "$PR_LABELS" | jq -e 'any(. == "build-failed")')
          HAS_REVIEW_REQUESTED_LABEL=$(echo "$PR_LABELS" | jq -e 'any(. == "review-requested")')

          # ================================================================
          # 📋 상태별 처리 로직 및 메시지 준비
          # ================================================================

          SLACK_ICON=""
          SLACK_MESSAGE=""
          REVIEWER_MENTIONS=""
          NEEDS_REVIEWER_ASSIGNMENT=false

          case "$CURRENT_BUILD_STATUS" in
            "failure")
              echo "🚫 빌드 실패 처리"
              SLACK_ICON=":x:"
              SLACK_MESSAGE="빌드 실패"

              # 라벨 관리
              gh pr edit $PR_NUMBER --add-label "build-failed"
              if $HAS_REVIEW_REQUESTED_LABEL; then
                echo "🏷️ 'review-requested' 라벨 제거"
                gh pr edit $PR_NUMBER --remove-label "review-requested"
              fi

              GITHUB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              SLACK_MESSAGE="$SLACK_MESSAGE
              *Github Action:* $GITHUB_URL"
              ;;

            "success")
              echo "✅ 빌드 성공 처리"
              SLACK_ICON=":white_check_mark:"

              # build-failed 라벨이 있으면 제거
              if $HAS_BUILD_FAILED_LABEL; then
                echo "🏷️ 'build-failed' 라벨 제거"
                gh pr edit $PR_NUMBER --remove-label "build-failed"
              fi

              # 리뷰어 할당 필요성 판단
              if ! $HAS_REVIEW_REQUESTED_LABEL; then
                echo "🤝 최초 성공 - 리뷰어 할당 필요"
                NEEDS_REVIEWER_ASSIGNMENT=true
                SLACK_MESSAGE="리뷰 요청"
              else
                echo "📝 수정 완료 - 리뷰어에게 알림만 전송"
                SLACK_MESSAGE="코드 수정 완료"

                # 기존 리뷰어 정보 가져오기 (멘션용)
                EXISTING_REVIEWERS=$(gh pr view $PR_NUMBER --json reviewRequests --jq '.reviewRequests[].login' | tr '\n' ',' | sed 's/,$//')
                if [ -n "$EXISTING_REVIEWERS" ]; then
                  IFS=',' read -r -a reviewer_array <<< "$EXISTING_REVIEWERS"
                  for reviewer in "${reviewer_array[@]}"; do
                    if [ -n "$reviewer" ]; then
                      slack_id=$(get_review_member_info "$TEAM_MEMBERS" "$reviewer" "slack_id")
                      REVIEWER_MENTIONS+="<@$slack_id> "
                    fi
                  done
                fi
              fi


          # ================================================================
          # 👥 리뷰어 할당 로직 (필요한 경우에만)
          # ================================================================

          if [ "$NEEDS_REVIEWER_ASSIGNMENT" = true ]; then
            echo "👤 리뷰어 후보를 찾는 중... (작성자: $PR_AUTHOR 제외)"
            CANDIDATES=$(jq -r --arg author "$PR_AUTHOR" '.members[] | select(.github_id != $author) | .github_id' .github/config/team_members.json)
            CANDIDATE_COUNT=$(echo "$CANDIDATES" | grep -v '^$' | wc -l)
            echo "선택 가능한 리뷰어 후보: $CANDIDATE_COUNT 명"

            if [ "$CANDIDATE_COUNT" -gt 0 ]; then
              # 리뷰어 수 결정
              if [ "$CANDIDATE_COUNT" -ge 2 ]; then
                NUM_TO_SELECT=2
              else
                NUM_TO_SELECT=1
              fi

              echo "선택할 리뷰어 수: $NUM_TO_SELECT 명"
              REVIEWER_IDS=$(echo "$CANDIDATES" | shuf -n "$NUM_TO_SELECT" | tr '\n' ',' | sed 's/,$//')

              # GitHub에 리뷰어 할당
              echo "🤝 선택된 리뷰어 ($REVIEWER_IDS)를 PR에 할당합니다."
              gh pr edit $PR_NUMBER --add-reviewer "$REVIEWER_IDS"
              gh pr edit $PR_NUMBER --add-label "review-requested"

              # 슬랙 멘션 준비
              IFS=',' read -r -a id_array <<< "$REVIEWER_IDS"
              for id in "${id_array[@]}"; do
                if [ -n "$id" ]; then
                  slack_id=$(get_review_member_info "$TEAM_MEMBERS" "$id" "slack_id")
                  REVIEWER_MENTIONS+="<@$slack_id> "
                fi
              done
            else
              echo "⚠️ 리뷰어를 선택할 수 없거나 후보가 없습니다."
              REVIEWER_MENTIONS="리뷰어 자동 할당 실패"
            fi
          fi

          # ================================================================
          # 📤 통합 Slack 알림 전송
          # ================================================================

          # 최종 메시지 구성
          FINAL_SLACK_MESSAGE="<$PR_URL|$PR_TITLE> - $SLACK_ICON
          *작성자:* $AUTHOR_MENTION"

          if [ -n "$REVIEWER_MENTIONS" ] && [ "$REVIEWER_MENTIONS" != "리뷰어 자동 할당 실패" ]; then
            FINAL_SLACK_MESSAGE="$FINAL_SLACK_MESSAGE
            *리뷰어:* $(echo $REVIEWER_MENTIONS | xargs) :crown:"
          elif [ "$REVIEWER_MENTIONS" = "리뷰어 자동 할당 실패" ]; then
            FINAL_SLACK_MESSAGE="$FINAL_SLACK_MESSAGE
            *리뷰어:* $REVIEWER_MENTIONS"
          fi

          FINAL_SLACK_MESSAGE="$FINAL_SLACK_MESSAGE
          *상태:* $SLACK_MESSAGE
          *코드 변경:* \`+${ADDITIONS} / -${DELETIONS}\`${FILES_INFO}"

          # 추가 정보가 있는 경우 (실패 시 GitHub Action URL 등)
          if echo "$SLACK_MESSAGE" | grep -q "Github Action:"; then
            GITHUB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            FINAL_SLACK_MESSAGE="$FINAL_SLACK_MESSAGE
            *Github Action:* $GITHUB_URL"
          fi

          echo "📤 Slack 알림 전송 중..."
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$FINAL_SLACK_MESSAGE\", \"username\": \"GitHub PR Notifier\"}" \
            "$SLACK_WEBHOOK_URL"

          echo "=== 🏁 워크플로우 종료 ==="